## Use auto-indentation.
unset autoindent

## Tab size
set tabsize 4

## Backup files to filename~.
set backup

## Do case-sensitive searches by default.
set casesensitive

## Remember the cursor position in each file for the next editing session.
set positionlog

## Constantly display the cursor position in the status bar.  Note that
## this overrides "quickblank".
set constantshow

## Remember the used search/replace strings for the next session.
set historylog

## Display line numbers to the left of the text.
set linenumbers

##Enable vim-style lock-files for when editing files.
set locking

## Enable mouse support, if available for your system.  When enabled,
## mouse clicks can be used to place the cursor, set the mark (with a
## double click), and execute shortcuts.  The mouse will work in the X
## Window System, and on the console when gpm is running.
### Mouse is disabled due to compat issues with ST
unset mouse

## Don't display the helpful shortcut lists at the bottom of the screen.
set nohelp

## Enable soft line wrapping (AKA full-line display).
set softwrap

## Save automatically on exit; don't prompt.
set tempfile

## The two single-column characters used to display the first characters
## of tabs and spaces.  187 in ISO 8859-1 (0000BB in Unicode) and 183 in
## ISO-8859-1 (0000B7 in Unicode) seem to be good values for these.
## The default when in a UTF-8 locale:
set whitespace "  "

## Detect word boundaries differently by treating punctuation
## characters as parts of words.
set wordbounds

## Let an unmodified Backspace or Delete erase the marked region (instead
## of a single character, and without affecting the cutbuffer).
set zap

## Paint the interface elements of nano.  These are examples;
## by default there are no colors, except for errorcolor.
set titlecolor cyan,black
set statuscolor cyan,black
set errorcolor brightwhite,red
set selectedcolor black,magenta
set stripecolor cyan,black
set numbercolor cyan,black
set keycolor cyan,black
set functioncolor cyan

include /usr/share/nano/nanorc.nanorc

##Color Syntax Highlighting

##nanorc syntax:
syntax nanorc "\.?nanorc$"
comment "#"

# Possible errors and parameters
icolor brightred "^[[:space:]]*((un)?(bind|set)|include|syntax|header|magic|comment|linter|i?color|extendsyntax).*"

# Keywords
icolor brightgreen "^[[:space:]]*(set|unset)[[:space:]]+(afterends|allow_insecure_backup|atblanks|autoindent|backup|backwards|boldtext|breaklonglines|casesensitive|constantshow|cutfromcursor|emptyline|finalnewline|historylog|jumpyscrolling|linenumbers|locking|morespace|mouse|multibuffer|noconvert|nohelp|nopauses|nonewlines|nowrap|positionlog|preserve|quickblank|quiet|rebinddelete|rebindkeypad|regexp|showcursor|smarthome|smooth|softwrap|suspend|tabstospaces|tempfile|trimblanks|unix|view|wordbounds|zap)\>"
icolor yellow "^[[:space:]]*set[[:space:]]+((error|function|key|number|selected|status|stripe|title)color)[[:space:]]+(bright)?(white|black|red|blue|green|yellow|magenta|cyan|normal)?(,(white|black|red|blue|green|yellow|magenta|cyan|normal))?\>"
icolor brightgreen "^[[:space:]]*set[[:space:]]+(backupdir|brackets|errorcolor|functioncolor|keycolor|matchbrackets|numbercolor|operatingdir|punct|quotestr|selectedcolor|speller|statuscolor|stripecolor|titlecolor|whitespace|wordchars)[[:space:]]+"
icolor brightgreen "^[[:space:]]*set[[:space:]]+(fill[[:space:]]+-?[[:digit:]]+|(guidestripe|tabsize)[[:space:]]+[1-9][0-9]*)\>"
icolor brightgreen "^[[:space:]]*bind[[:space:]]+((\^([[:alpha:]]|[]@\^_]|Space)|M-([[:alpha:]]|[]!"#$%&'()*+,./0-9:;<=>?@\^_`{|}~-]|Space))|F([1-9]|1[0-6])|Ins|Del)[[:space:]]+([[:alpha:]]+|".*")[[:space:]]+(all|main|search|replace(with)?|yesno|gotoline|writeout|insert|ext(ernal)?cmd|help|spell|linter|browser|whereisfile|gotodir)([[:space:]]+#|[[:space:]]*$)"
icolor brightgreen "^[[:space:]]*unbind[[:space:]]+((\^([[:alpha:]]|[]@\^_]|Space)|M-([[:alpha:]]|[]!"#$%&'()*+,./0-9:;<=>?@\^_`{|}~-]|Space))|F([1-9]|1[0-6])|Ins|Del)[[:space:]]+(all|main|search|replace(with)?|yesno|gotoline|writeout|insert|ext(ernal)?cmd|help|spell|linter|browser|whereisfile|gotodir)([[:space:]]+#|[[:space:]]*$)"
icolor brightgreen "^[[:space:]]*extendsyntax[[:space:]]+[[:alpha:]]+[[:space:]]+(i?color|header|magic|comment|linter)[[:space:]]+.*"
icolor brightgreen "^[[:space:]]*(syntax|linter)[[:space:]]+[^[:blank:]]+"
icolor green "^[[:space:]]*((un)?(bind|set)|include|syntax|header|magic|comment|linter|extendsyntax)\>"

# Strings
color brightmagenta "([[:space:]]|(start|end)=)".+"([[:space:]]|$)"

# Colors
icolor yellow "^[[:space:]]*i?color[[:space:]]*(bright)?(white|black|red|blue|green|yellow|magenta|cyan|normal)?(,(white|black|red|blue|green|yellow|magenta|cyan|normal))?\>"
icolor magenta "^[[:space:]]*i?color\>" "\<(start|end)="

# Comments
color brightblue "(^|[[:space:]]+)#.*"
color cyan "^[[:space:]]*##.*"

# Trailing whitespace
##shell syntax:
syntax sh "(\.sh|\.(a|ba|c|da|k|mk|pdk|tc|z)(sh|shrc|sh_profile)|/(etc/|\.)profile)$"
header "^#!.*/(((a|ba|c|da|k|mk|pdk|tc|z)?sh)|(busybox|env) +sh|openrc-run|runscript)"
magic "(POSIX|Bourne-Again) shell script.*text"
linter dash -n
comment "#"
color cyan "\<(break|case|continue|do|done|elif|else|esac|exit|fi|for|function|if|in|read|return|select|shift|then|time|until|while)\>"
color cyan "\<(declare|eval|exec|export|let|local)\>"
color cyan "['"]"
color cyan "[[:blank:]]-[A-Za-z]+\>" "[[:blank:]]--[A-Za-z-]+\>"
color blue "(\]|\[)"
color brightgreen "\$\<[A-z_\-]{2,}\>"
color brightgreen "[\$\*\`]" "\<(true)\>"
color brightyellow "[{}():;|`<>&/\\]"
color blue "-\<(eq|ne|gt|lt|ge|le|s|n|z)\>"
color red "\<(\!)\>" "\!\=" "\!"
color magenta "(^|[[:space:]])#.*"
color ,white "[[:space:]]+$"
color white "\.*"

## C/C++ syntax.
syntax c "\.([ch](pp|xx)?|C|cc|c\+\+|H|hh|ii?)$"
magic "^(C|C\+\+) (source|program)"
comment "//"

# Constants.
color brightred "\<[A-Z_][0-9A-Z_]+\>"
# Labels.
color brightmagenta "^[[:space:]]*[A-Z_a-z]+:[[:space:]]*$"

color green "\<(float|double|bool|char|int|short|long|sizeof|enum|void|auto|static|const|struct|union|typedef|extern|(un)?signed|inline)\>"
color green "\<([[:lower:]]+|(u_?)?int(8|16|32|64|ptr))_t\>"
color green "\<(class|namespace|template|public|protected|private|typename|this|friend|virtual|override|using|mutable|volatile|register|explicit)\>"
color brightyellow "\<(for|if|while|do|else|case|default|switch)\>"
color brightyellow "\<(try|throw|catch|operator|new|delete)\>"
color magenta "\<(goto|continue|break|return)\>"
color brightmagenta "'([^'\]|(\\["'abfnrtv\\]))'" "'\\(([0-3]?[0-7]{1,2}))'" "'\\x[0-9A-Fa-f]{1,2}'"

# GCC builtins.
color cyan "__attribute__[[:space:]]*\(\([^)]*\)\)" "__(aligned|asm|builtin|hidden|inline|packed|restrict|section|typeof|weak)__"

# Strings.  In general you will want your strings and comments to come last,
# because highlighting rules are applied in the order they are read in.
color brightyellow ""([^"]|\\")*"" "#[[:space:]]*include[[:space:]]+<[^[:blank:]=]*>"
# Multiline strings.  This regex is VERY resource intensive,
# and sometimes colours things that shouldn't be coloured.
###color brightyellow start=""(\\.|[^"])*\\[[:space:]]*$" end="^(\\.|[^"])*""

# Preprocessor directives.
color brightcyan start="^[[:space:]]*#[[:space:]]*(if(n?def)?|elif|warning|error|pragma)\>" end="(\`|[^\\])$"
color brightcyan "^[[:space:]]*#[[:space:]]*(define|else|endif|include(_next)?|undef)\>"

# Comments.
color brightblue "//.*"
color brightblue start="/\*" end="\*/"

# Reminders.
color brightwhite,yellow "\<(FIXME|TODO|XXX)\>"

# Trailing whitespace.
color ,green "[[:space:]]+$"

## Python

syntax python "\.py$"
header "^#!.*python"
magic "Python script"
linter pyflakes
comment "#"

# Function definitions.
color brightblue "def [0-9A-Za-z_]+"
# Keywords.
color brightcyan "\<(and|as|assert|async|await|break|class|continue)\>"
color brightcyan "\<(def|del|elif|else|except|finally|for|from)\>"
color brightcyan "\<(global|if|import|in|is|lambda|nonlocal|not|or)\>"
color brightcyan "\<(pass|raise|return|try|while|with|yield)\>"

# These two are keywords in Python 2, but functions in Python 3,
# so only color them when they are followed by whitespace, assuming
# that print(x) is a function invocation and print (x) is a statement.
color brightcyan "\<(exec|print)([[:blank:]]|$)"

# Special values.
color brightmagenta "\<(False|None|True)\>"

# Mono-quoted strings.
color brightgreen "'([^'\]|\\.)*'|'''"
color brightgreen ""([^"\]|\\.)*"|""""
color normal "'''|""""
# Comments.
color brightred "(^|[[:blank:]])#.*"
# Triple-quoted strings.
color brightgreen    start="'''([^'),]|$)" end="(^|[^(\])'''"
color brightgreen    start=""""([^"),]|$)" end="(^|[^(\])""""

# Reminders.
color brightwhite,yellow "(FIXME|TODO|XXX)"

# Trailing whitespace.
color ,green "[[:space:]]+$"

## Key bindings.
unbind ^Q main
unbind ^A main
unbind ^Z main
unbind ^W main
unbind ^S main
unbind ^X main
unbind ^E main
unbind ^D main
unbind ^C main
unbind ^R main
unbind ^F main
unbind ^V main
unbind ^T main
unbind ^G main
unbind ^B main
unbind ^Y main
unbind ^H main
unbind ^N main
unbind ^U main
unbind ^J main
#unbind ^M main
unbind ^K main
unbind ^O main
#unbind ^, main
unbind ^L main
unbind ^P main
unbind ^[ main
#unbind ^; main
#unbind ^. main
unbind ^] main
#unbind ^' main
#unbind ^/ main
unbind ^\ main
unbind ^E main
unbind ^Y main

bind ^A complete main
bind ^W whereis main
bind ^S savefile main
bind ^X exit main
bind ^F redo main
bind ^D undo main
bind ^R replace main
bind ^V paste main
bind ^K cut main
bind ^L insert main
bind ^O writeout main
bind ^T linter main
bind ^Q linenumbers main
bind ^H backspace main
bind Ins chopwordleft main
bind Del chopwordright main
bind ^G gotoline main
bind ^I casesens search
